specifications:
- key: xmentityspec
  jsonSchemaUrl: "classpath:specs/xmentityschema.json" # path to the json schema file
  fileAntPatterns: # notice: lookup only in current tenant folder
    - "**/entity/xmentityspec.yml"
    - "**/entity/xmentityspec/*.yml"
  inspections:
    - key: xmentityspec
      elementPath: types[].key # path to the target element
      condition: context.fullSpec.types.filter(it => it.key == context.yamlNode.value).length > 1
      # this string will be evaluated as es string template
      errorMessageTemplate: "Duplication entity typeKey '${context.yamlNode.value}'"
      severity: ERROR # INFO, WARNING, ERROR
#  autocompletes:
#    - key: xmentityspec-link-type
  injections:
    - elementPath: types[].dataSpec
      language: JSON
      jsonSchemaUrl: "http://json-schema.org/draft-07/schema"
    - elementPath: types[].dataForm
      language: JSON
    - elementPath: definitions[].value
      language: JSON
      jsonSchemaUrl: "classpath:specs/json-schema.json"
    - elementPath: forms[].value
      language: JSON
    - elementPath: types[].functions[].inputSpec
      language: JSON
      jsonSchemaUrl: "classpath:specs/json-schema.json"
    - elementPath: types[].functions[].inputForm
      language: JSON
    - elementPath: types[].states[].next[].inputSpec
      language: JSON
      jsonSchemaUrl: "classpath:specs/json-schema.json"
    - elementPath: types[].states[].next[].inputForm
      language: JSON
      jsonSchemaUrl: "classpath:specs/json-schema.json"
  references:
    - key: XmEntity-Save-lep
      elementPath: types[].key
      reference:
        type: file # file | element
        required: true
        filePathTemplates: # tenant as root
          - "/entity/lep/service/entity/Save$$${context.yamlNode.value}.groovy"
          - "/entity/lep/service/entity/Save$$${context.yamlNode.value}$$around.groovy"
          - "/entity/lep/service/entity/Save$$${context.yamlNode.value}$$tenant.groovy"
          - "/entity/lep/service/entity/Save$$${context.translateToLepConvention(context.yamlNode.value)}.groovy"
          - "/entity/lep/service/entity/Save$$${context.translateToLepConvention(context.yamlNode.value)}$$around.groovy"
          - "/entity/lep/service/entity/Save$$${context.translateToLepConvention(context.yamlNode.value)}$$tenant.groovy"
      severity: INFO
      # language=javascript
      action: context.createTenantFile(`/entity/lep/Save$$${context.yamlNode.value}.groovy`, `return null`)
      actionMessageTemplate: "Create entity save lep 'Save$$${context.yamlNode.value}.groovy'"
    - key: nextState-to-State
      elementPath: types[].states[].next[].stateKey
      reference:
        type: element # file | element
        required: true
        elementPathTemplates:
          - "types[key='${context.yamlNode.parent.parent.parent.parent.parent.value.key}'].states[].key('${context.yamlNode.value}')"
      severity: ERROR
      errorMessageTemplate: "State key '${context.yamlNode.value}' not found"
    - key: Link-to-XmEntity-TypeKey
      elementPath: types[].links[].typeKey
      reference:
        type: element # file | element
        required: true
        elementPathTemplates:
          - "types[].key('${context.yamlNode.value}')"
      severity: ERROR
      errorMessageTemplate: "Entity typeKey '${context.yamlNode.value}' not found"
    - key: XmEntity-Function-lep
      elementPath: types[].functions[].key
      reference:
        type: file # file | element
        required: true
        filePathTemplates: # tenant as root
          - "/entity/lep/function/${computeFunctionPath(context, true)}.groovy"
          - "/entity/lep/function/${computeFunctionPath(context, true)}$$tenant.groovy"
          - "/entity/lep/function/${computeFunctionPath(context, false)}.groovy"
          - "/entity/lep/function/${computeFunctionPath(context, false)}$$tenant.groovy"
      severity: WARN
      errorMessageTemplate: "Function lep 'function/${computeFunctionPath(context, true)}.groovy' not found"
      action: context.createTenantFile(`/entity/lep/function/${computeFunctionPath(context, true)}.groovy`, `return null`)
      actionMessageTemplate: "Create function lep 'function/${computeFunctionPath(context, true)}.groovy'"
      includeFunctions:
        - computeFunctionPath

jsFunctions:
- key: computeFunctionPath
  #language=javascript
  body: |
    function computeFunctionPath(context, translateToLepConvention) {
        var yamlNode = context.yamlNode;
        const value = yamlNode.value;
        const nameIndex = value.lastIndexOf('/');
        const isWithEntityId = yamlNode.parent.value.withEntityId;
        const anonymous = yamlNode.parent.value.anonymous;
        let name = value.substring(nameIndex + 1);
        name = translateToLepConvention ? context.translateToLepConvention(name) : name;
        let prefix = 'Function';
        prefix = isWithEntityId ? 'FunctionWithXmEntity' : prefix;
        prefix = anonymous ? 'AnonymousFunction' : prefix;
        var pathToFunction = nameIndex > 0 ? value.substring(0, nameIndex) + "/" : "";
        return pathToFunction + prefix + "$$" + name;
    }
