<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <id>com.icthh.xm.xmeplugin</id>
    <!--suppress PluginXmlCapitalization become it`s brand name  -->
    <name>XME.digital</name>
    <vendor>sergeysenja1992</vendor>
    <idea-version since-build="242"/>

    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.vcs</depends>
    <depends>org.intellij.intelliLang</depends>
    <depends>org.intellij.groovy</depends>
    <depends>org.jetbrains.plugins.yaml</depends>
    <depends>com.intellij.modules.json</depends>

    <resource-bundle>messages.MessagesBundle</resource-bundle>

    <extensions defaultExtensionNs="com.intellij">

        <!-- start search lep files by typeKey (replace . to $ and - to _), and search tenant folders by domain -->
        <gotoFileContributor implementation="com.icthh.xm.xmeplugin.extensions.LepChooseByNameContributor" />

        <!-- xmentityspec start -->
        <!-- Listen update xmentityspec and invalidate spec info in memory -->

        <!-- Add color icons to xmentityspec "color" fields, and allow to use color picker -->
        <colorProvider implementation="com.icthh.xm.xmeplugin.extensions.xmentityspec.XmEntitySpecElementColorProvider" />
        <!-- Add icon preview marker to xmentityspec icons fields -->
        <codeInsight.lineMarkerProvider language="yaml" implementationClass="com.icthh.xm.xmeplugin.extensions.xmentityspec.XmEntityIconLineMarkerProvider" />
        <!-- Inject json syntax highlight to dataSpec/dataFrom/inputSpec/inputForm etc -->
        <languageInjectionContributor implementationClass="com.icthh.xm.xmeplugin.yaml.exts.YamlLanguageInjectionContributor" language="yaml"/>
        <!-- xmentityspec end -->

        <toolWindow factoryClass="com.icthh.xm.xmeplugin.toolWindow.XmePluginToolWindowFactory" id="XmeToolWindow" anchor="right">
        </toolWindow>

        <!-- On project tree use logo or favicon as folder icon of tenant folder -->
        <iconProvider implementation="com.icthh.xm.xmeplugin.extensions.ConfigIconProvider" order="first" />
        <!-- On project tree on tenant folders show domain and parent tenant near folder(tenant) name -->
        <treeStructureProvider implementation="com.icthh.xm.xmeplugin.extensions.TreeProvider" />

        <notificationGroup id="XME.digital" displayType="BALLOON" isLogByDefault="true" />

        <!-- lepContext.commons autocomplete when lep opened outside microservice context -->
        <completion.contributor language="Groovy" implementationClass="com.icthh.xm.xmeplugin.extensions.CommonsCompletionContributor" />

        <!--
        If we have in tenant-config.yml fields like "entity-function", to use it in groovy we need to wrap it to single quotes.
        Next contributor need to hide original entity-function fields without single quotes during completion.
         -->
        <completion.contributor language="Groovy" implementationClass="com.icthh.xm.xmeplugin.extensions.HideTenantConfigFieldsCompletionContributor"
                                order="first"/>
        <gotoDeclarationHandler implementation="com.icthh.xm.xmeplugin.extensions.TenantConfigGotoDeclarationHandler" />

        <!-- Reference from scheduler typeKey to file handler -->
        <psi.referenceContributor implementation="com.icthh.xm.xmeplugin.extensions.HandlerReferenceContributor"
                                  language="yaml"/>


        <!-- хз для чогось треба, але не пам'ятаю для чого -->
        <json.catalog.exclusion implementation="com.icthh.xm.xmeplugin.extensions.xmentityspec.XmEntitySpecSchemaExclusion" />

        <!-- xmentityspec inspections -->
        <localInspection language="yaml" implementationClass="com.icthh.xm.xmeplugin.yaml.exts.YamlSpecLocalInspection"
                         bundle="messages.MessagesBundle"
                         shortName="XmEntitySpecValidation"
                         key="inspections.entity.validation.name"
                         groupKey="inspections.group.name"
                         enabledByDefault="true"
        />

        <!-- read xme-plugin.yml -->
        <postStartupActivity implementation="com.icthh.xm.xmeplugin.yaml.ReadConfigFileStartupActivity"/>
        <!-- listen files added/deleted/moved to keep actual file list for each spec-s -->
        <vfs.asyncListener implementation="com.icthh.xm.xmeplugin.yaml.YamlAsyncFileListener"/>
        <psi.referenceContributor implementation="com.icthh.xm.xmeplugin.yaml.exts.YamlReferenceContributor" language="yaml"/>

        <refactoring.elementListenerProvider implementation="com.icthh.xm.xmeplugin.extensions.CommonsRefactoringElementListenerProvider"/>
    </extensions>

    <actions>

        <group id="editorPopupMenu">
            <add-to-group group-id="EditorPopupMenu" anchor="after" relative-to-action="EditorToggleColumnMode" />
            <separator/>
            <action id="refreshCurrentFile" class="com.icthh.xm.xmeplugin.actions.DeployCurrentFile" text="Update current file in memory"/>
            <separator/>
            <action id="generate" class="com.icthh.xm.xmeplugin.actions.GenerateAction" text="Generate entity typeKey constants" />
            <separator/>
        </group>

        <action id="deployToEnvSelectorOldUi" class="com.icthh.xm.xmeplugin.actions.DeployEnvSelector"
                text="Deploy Envs">
            <add-to-group group-id="NavBarToolBar" anchor="before" relative-to-action="MainSettingActionOldUiToolbar"/>
        </action>
        <action
                id="MainSettingActionOldUiToolbar"
                class="com.icthh.xm.xmeplugin.actions.settings.MainSettingAction"
                text="Settings"
                icon="icons/settings.svg">
            <add-to-group group-id="NavBarToolBar" anchor="first">
            </add-to-group>
        </action>
        <action id="deployToEnvOldUi" class="com.icthh.xm.xmeplugin.actions.DeployToEnv"
                text="Deploy Envs"
                icon="icons/deploy.svg"
        >
            <add-to-group group-id="NavBarToolBar" anchor="after" relative-to-action="MainSettingActionOldUiToolbar"/>
        </action>
        <!-- -->
        <action id="deployToEnvSelectorNewUi" class="com.icthh.xm.xmeplugin.actions.DeployEnvSelector"
                text="Deploy Envs">
            <add-to-group group-id="MainToolbarLeft" anchor="before" relative-to-action="MainSettingActionNewUiToolbar"/>
        </action>
        <action
                id="MainSettingActionNewUiToolbar"
                class="com.icthh.xm.xmeplugin.actions.settings.MainSettingAction"
                text="Settings"
                icon="icons/settings.svg">
            <add-to-group group-id="MainToolbarLeft" anchor="last">
            </add-to-group>
        </action>
        <action id="deployToEnvNewUi" class="com.icthh.xm.xmeplugin.actions.DeployToEnv"
                text="Deploy Envs"
                icon="icons/deploy.svg">
            <add-to-group group-id="MainToolbarLeft" anchor="after" relative-to-action="MainSettingActionNewUiToolbar"/>
        </action>
    </actions>

    <extensions defaultExtensionNs="JavaScript">
        <JsonSchema.ProviderFactory implementation="com.icthh.xm.xmeplugin.yaml.exts.YamlJsonSchemaContributor" />
        <JsonSchema.ProviderFactory implementation="com.icthh.xm.xmeplugin.yaml.exts.YamlJsonSchemaInFieldContributor" />
    </extensions>


    <extensions defaultExtensionNs="org.intellij.groovy">
        <!-- search in classpath class with name LepContext and use it for autocomplete lepContext field -->
        <membersContributor implementation="com.icthh.xm.xmeplugin.extensions.LepContextNonCodeMembersContributor"/>

        <!-- lepContext.commons autocomplete when lep opened inside microservice context -->
        <membersContributor implementation="com.icthh.xm.xmeplugin.extensions.CommonsNonCodeMembersContributor"/>

        <!-- lepContext.inArgs autocomplete when lep opened inside microservice context -->
        <membersContributor implementation="com.icthh.xm.xmeplugin.extensions.InArgsNonCodeMembersContributor"/>

        <!--
        If we have in tenant-config.yml fields like "entity-function", to support autocomplete for this fields we need
        inject it wrapper in single quotes as synthetic property to groovy psi tree.
        -->
        <membersContributor implementation="com.icthh.xm.xmeplugin.extensions.TenantConfigWrongNameFields"/>

        <!-- Autocomplete for tenant-config.yml fields when we called getConfig method -->
        <typeCalculator forClass="org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrMethodCall"
                        implementationClass="com.icthh.xm.xmeplugin.extensions.TenantConfigMethodCallTypeCalculator" />
        <!-- Main autocomplete for tenant-config.yml fields (and handle when we used .config) -->
        <typeCalculator forClass="org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrReferenceExpression"
                        implementationClass="com.icthh.xm.xmeplugin.extensions.TenantConfigPropertyTypeCalculator" />
        <!-- In type calculator we can get only current field name. To get full expression started from lepContext
        we need to accumulate it in user data of psi element. -->
        <typeCalculator forClass="org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrReferenceExpression"
                        implementationClass="com.icthh.xm.xmeplugin.extensions.LepContextTypeCalculator" />
    </extensions>
</idea-plugin>
